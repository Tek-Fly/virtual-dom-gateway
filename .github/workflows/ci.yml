name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  DOCKER_REGISTRY: flybywire.io
  DOCKER_ORG: tekfly

jobs:
  # Protocol Buffer Linting
  buf-lint:
    name: Buf Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Buf
        uses: bufbuild/buf-setup-action@v1
        with:
          version: '1.28.1'
      
      - name: Lint protobuf files
        run: |
          cd proto
          buf lint
      
      - name: Check breaking changes
        run: |
          cd proto
          buf breaking --against '.git#branch=main'
        continue-on-error: true  # Don't fail on first run

  # Rust Gateway Tests
  test-gateway:
    name: Test Gateway (Rust)
    runs-on: ubuntu-latest
    needs: [buf-lint]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          components: rustfmt, clippy

      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cd src/gateway && cargo fmt -- --check

      - name: Run clippy
        run: cd src/gateway && cargo clippy -- -D warnings

      - name: Run tests
        run: cd src/gateway && RUSTFLAGS="-D warnings" cargo test

      - name: Build release
        run: cd src/gateway && RUSTFLAGS="-D warnings" cargo build --release

  # Go GitHub Bridge Tests
  test-github-bridge:
    name: Test GitHub Bridge (Go)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2

      - name: Run linter
        run: cd src/github-bridge && golangci-lint run

      - name: Run tests
        run: cd src/github-bridge && go test -v ./...

      - name: Build binary
        run: cd src/github-bridge && go build -v .

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [test-gateway, test-github-bridge]
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Build Docker Images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-gateway, test-github-bridge]
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/virtualdom-gateway
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/virtualdom-github-bridge
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Gateway image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.gateway
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/virtualdom-gateway:${{ steps.meta.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}

      - name: Build and push GitHub Bridge image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.github-bridge
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/virtualdom-github-bridge:${{ steps.meta.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            COMMIT=${{ github.sha }}

      - name: Run Docker Scout
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          curl -fsSL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh -o install-scout.sh
          sh install-scout.sh
          
          docker scout cves ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/virtualdom-gateway:${{ steps.meta.outputs.version }}
          docker scout cves ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/virtualdom-github-bridge:${{ steps.meta.outputs.version }}

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-docker, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Staging
        run: |
          echo "Deploying to staging environment..."
          # Add staging deployment commands

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker, security-scan]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Production
        run: |
          echo "Deploying to production environment..."
          # Add production deployment commands