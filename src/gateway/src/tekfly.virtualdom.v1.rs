// This file is @generated by prost-build.
/// Request to write a diff
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WriteDiffRequest {
    #[prost(string, tag = "1")]
    pub repo: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub branch: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub path: ::prost::alloc::string::String,
    /// Raw BSON diff
    #[prost(bytes = "vec", tag = "4")]
    pub diff: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "5")]
    pub author: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub message: ::prost::alloc::string::String,
    /// For optimistic locking
    #[prost(int64, tag = "7")]
    pub parent_version: i64,
    #[prost(map = "string, string", tag = "8")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// Response for write diff
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WriteDiffResponse {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub version: i64,
    #[prost(message, optional, tag = "3")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    /// If conflict occurred
    #[prost(message, optional, tag = "4")]
    pub conflict: ::core::option::Option<ConflictInfo>,
}
/// Conflict information
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConflictInfo {
    #[prost(bool, tag = "1")]
    pub has_conflict: bool,
    #[prost(int64, tag = "2")]
    pub current_version: i64,
    #[prost(string, tag = "3")]
    pub current_author: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "4")]
    pub current_content: ::prost::alloc::vec::Vec<u8>,
}
/// Request to read snapshot
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadSnapshotRequest {
    #[prost(string, tag = "1")]
    pub repo: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub branch: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub path: ::prost::alloc::string::String,
    /// Optional, latest if not specified
    #[prost(int64, tag = "4")]
    pub version: i64,
}
/// Response with snapshot
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadSnapshotResponse {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// Raw BSON content
    #[prost(bytes = "vec", tag = "2")]
    pub content: ::prost::alloc::vec::Vec<u8>,
    #[prost(int64, tag = "3")]
    pub version: i64,
    #[prost(string, tag = "4")]
    pub author: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "5")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(map = "string, string", tag = "6")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// Subscribe to changes request
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeChangesRequest {
    #[prost(string, tag = "1")]
    pub repo: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub branch: ::prost::alloc::string::String,
    /// Empty for all paths
    #[prost(string, repeated, tag = "3")]
    pub paths: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Start from this version
    #[prost(int64, tag = "4")]
    pub from_version: i64,
}
/// Real-time change event
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeEvent {
    #[prost(enumeration = "change_event::EventType", tag = "1")]
    pub r#type: i32,
    #[prost(string, tag = "2")]
    pub repo: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub branch: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub path: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "5")]
    pub diff: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "6")]
    pub author: ::prost::alloc::string::String,
    #[prost(int64, tag = "7")]
    pub version: i64,
    #[prost(message, optional, tag = "8")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(map = "string, string", tag = "9")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// Nested message and enum types in `ChangeEvent`.
pub mod change_event {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum EventType {
        Unspecified = 0,
        Create = 1,
        Update = 2,
        Delete = 3,
        Rename = 4,
    }
    impl EventType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "EVENT_TYPE_UNSPECIFIED",
                Self::Create => "EVENT_TYPE_CREATE",
                Self::Update => "EVENT_TYPE_UPDATE",
                Self::Delete => "EVENT_TYPE_DELETE",
                Self::Rename => "EVENT_TYPE_RENAME",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "EVENT_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
                "EVENT_TYPE_CREATE" => Some(Self::Create),
                "EVENT_TYPE_UPDATE" => Some(Self::Update),
                "EVENT_TYPE_DELETE" => Some(Self::Delete),
                "EVENT_TYPE_RENAME" => Some(Self::Rename),
                _ => None,
            }
        }
    }
}
/// Conflict resolution request
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResolveConflictRequest {
    #[prost(string, tag = "1")]
    pub repo: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub branch: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub path: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "4")]
    pub local_content: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "5")]
    pub remote_content: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "6")]
    pub base_content: ::prost::alloc::vec::Vec<u8>,
    /// "manual", "ours", "theirs", "ai"
    #[prost(string, tag = "7")]
    pub strategy: ::prost::alloc::string::String,
}
/// Conflict resolution response
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResolveConflictResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub merged_content: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, repeated, tag = "2")]
    pub markers: ::prost::alloc::vec::Vec<ConflictMarker>,
    #[prost(bool, tag = "3")]
    pub ai_resolved: bool,
    #[prost(string, tag = "4")]
    pub resolution_notes: ::prost::alloc::string::String,
}
/// Conflict marker in merged content
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConflictMarker {
    #[prost(int32, tag = "1")]
    pub start_line: i32,
    #[prost(int32, tag = "2")]
    pub end_line: i32,
    #[prost(string, tag = "3")]
    pub description: ::prost::alloc::string::String,
}
/// Get history request
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetHistoryRequest {
    #[prost(string, tag = "1")]
    pub repo: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub branch: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub path: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub limit: i32,
    #[prost(int64, tag = "5")]
    pub before_version: i64,
}
/// History response
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetHistoryResponse {
    #[prost(message, repeated, tag = "1")]
    pub entries: ::prost::alloc::vec::Vec<HistoryEntry>,
    #[prost(bool, tag = "2")]
    pub has_more: bool,
}
/// Single history entry
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HistoryEntry {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub version: i64,
    #[prost(string, tag = "3")]
    pub author: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "5")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(int32, tag = "6")]
    pub additions: i32,
    #[prost(int32, tag = "7")]
    pub deletions: i32,
}
/// Push intent for GitHub synchronization
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PushIntent {
    #[prost(string, tag = "1")]
    pub repo: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub branch: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub changes: ::prost::alloc::vec::Vec<FileChange>,
    #[prost(string, tag = "4")]
    pub commit_message: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub author_name: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub author_email: ::prost::alloc::string::String,
    #[prost(bool, tag = "7")]
    pub create_pr: bool,
    #[prost(string, tag = "8")]
    pub pr_title: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub pr_body: ::prost::alloc::string::String,
}
/// File change in push intent
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FileChange {
    #[prost(enumeration = "file_change::ChangeType", tag = "1")]
    pub r#type: i32,
    #[prost(string, tag = "2")]
    pub path: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "3")]
    pub content: ::prost::alloc::vec::Vec<u8>,
    /// For renames
    #[prost(string, tag = "4")]
    pub old_path: ::prost::alloc::string::String,
}
/// Nested message and enum types in `FileChange`.
pub mod file_change {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum ChangeType {
        Unspecified = 0,
        Add = 1,
        Modify = 2,
        Delete = 3,
        Rename = 4,
    }
    impl ChangeType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "CHANGE_TYPE_UNSPECIFIED",
                Self::Add => "CHANGE_TYPE_ADD",
                Self::Modify => "CHANGE_TYPE_MODIFY",
                Self::Delete => "CHANGE_TYPE_DELETE",
                Self::Rename => "CHANGE_TYPE_RENAME",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "CHANGE_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
                "CHANGE_TYPE_ADD" => Some(Self::Add),
                "CHANGE_TYPE_MODIFY" => Some(Self::Modify),
                "CHANGE_TYPE_DELETE" => Some(Self::Delete),
                "CHANGE_TYPE_RENAME" => Some(Self::Rename),
                _ => None,
            }
        }
    }
}
/// Generated client implementations.
pub mod memory_gateway_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Main service for Virtual DOM operations
    #[derive(Debug, Clone)]
    pub struct MemoryGatewayClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MemoryGatewayClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MemoryGatewayClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MemoryGatewayClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MemoryGatewayClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Write a diff to the Virtual DOM
        pub async fn write_diff(
            &mut self,
            request: impl tonic::IntoRequest<super::WriteDiffRequest>,
        ) -> std::result::Result<
            tonic::Response<super::WriteDiffResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tekfly.virtualdom.v1.MemoryGateway/WriteDiff",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("tekfly.virtualdom.v1.MemoryGateway", "WriteDiff"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Read a snapshot of the Virtual DOM
        pub async fn read_snapshot(
            &mut self,
            request: impl tonic::IntoRequest<super::ReadSnapshotRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ReadSnapshotResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tekfly.virtualdom.v1.MemoryGateway/ReadSnapshot",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("tekfly.virtualdom.v1.MemoryGateway", "ReadSnapshot"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Subscribe to real-time changes
        pub async fn subscribe_changes(
            &mut self,
            request: impl tonic::IntoRequest<super::SubscribeChangesRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::ChangeEvent>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tekfly.virtualdom.v1.MemoryGateway/SubscribeChanges",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "tekfly.virtualdom.v1.MemoryGateway",
                        "SubscribeChanges",
                    ),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        /// Resolve conflicts between versions
        pub async fn resolve_conflict(
            &mut self,
            request: impl tonic::IntoRequest<super::ResolveConflictRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ResolveConflictResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tekfly.virtualdom.v1.MemoryGateway/ResolveConflict",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "tekfly.virtualdom.v1.MemoryGateway",
                        "ResolveConflict",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Get file history
        pub async fn get_history(
            &mut self,
            request: impl tonic::IntoRequest<super::GetHistoryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetHistoryResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tekfly.virtualdom.v1.MemoryGateway/GetHistory",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("tekfly.virtualdom.v1.MemoryGateway", "GetHistory"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod memory_gateway_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with MemoryGatewayServer.
    #[async_trait]
    pub trait MemoryGateway: std::marker::Send + std::marker::Sync + 'static {
        /// Write a diff to the Virtual DOM
        async fn write_diff(
            &self,
            request: tonic::Request<super::WriteDiffRequest>,
        ) -> std::result::Result<
            tonic::Response<super::WriteDiffResponse>,
            tonic::Status,
        >;
        /// Read a snapshot of the Virtual DOM
        async fn read_snapshot(
            &self,
            request: tonic::Request<super::ReadSnapshotRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ReadSnapshotResponse>,
            tonic::Status,
        >;
        /// Server streaming response type for the SubscribeChanges method.
        type SubscribeChangesStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::ChangeEvent, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        /// Subscribe to real-time changes
        async fn subscribe_changes(
            &self,
            request: tonic::Request<super::SubscribeChangesRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::SubscribeChangesStream>,
            tonic::Status,
        >;
        /// Resolve conflicts between versions
        async fn resolve_conflict(
            &self,
            request: tonic::Request<super::ResolveConflictRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ResolveConflictResponse>,
            tonic::Status,
        >;
        /// Get file history
        async fn get_history(
            &self,
            request: tonic::Request<super::GetHistoryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetHistoryResponse>,
            tonic::Status,
        >;
    }
    /// Main service for Virtual DOM operations
    #[derive(Debug)]
    pub struct MemoryGatewayServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> MemoryGatewayServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for MemoryGatewayServer<T>
    where
        T: MemoryGateway,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/tekfly.virtualdom.v1.MemoryGateway/WriteDiff" => {
                    #[allow(non_camel_case_types)]
                    struct WriteDiffSvc<T: MemoryGateway>(pub Arc<T>);
                    impl<
                        T: MemoryGateway,
                    > tonic::server::UnaryService<super::WriteDiffRequest>
                    for WriteDiffSvc<T> {
                        type Response = super::WriteDiffResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::WriteDiffRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MemoryGateway>::write_diff(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = WriteDiffSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/tekfly.virtualdom.v1.MemoryGateway/ReadSnapshot" => {
                    #[allow(non_camel_case_types)]
                    struct ReadSnapshotSvc<T: MemoryGateway>(pub Arc<T>);
                    impl<
                        T: MemoryGateway,
                    > tonic::server::UnaryService<super::ReadSnapshotRequest>
                    for ReadSnapshotSvc<T> {
                        type Response = super::ReadSnapshotResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ReadSnapshotRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MemoryGateway>::read_snapshot(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ReadSnapshotSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/tekfly.virtualdom.v1.MemoryGateway/SubscribeChanges" => {
                    #[allow(non_camel_case_types)]
                    struct SubscribeChangesSvc<T: MemoryGateway>(pub Arc<T>);
                    impl<
                        T: MemoryGateway,
                    > tonic::server::ServerStreamingService<
                        super::SubscribeChangesRequest,
                    > for SubscribeChangesSvc<T> {
                        type Response = super::ChangeEvent;
                        type ResponseStream = T::SubscribeChangesStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SubscribeChangesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MemoryGateway>::subscribe_changes(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SubscribeChangesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/tekfly.virtualdom.v1.MemoryGateway/ResolveConflict" => {
                    #[allow(non_camel_case_types)]
                    struct ResolveConflictSvc<T: MemoryGateway>(pub Arc<T>);
                    impl<
                        T: MemoryGateway,
                    > tonic::server::UnaryService<super::ResolveConflictRequest>
                    for ResolveConflictSvc<T> {
                        type Response = super::ResolveConflictResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ResolveConflictRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MemoryGateway>::resolve_conflict(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ResolveConflictSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/tekfly.virtualdom.v1.MemoryGateway/GetHistory" => {
                    #[allow(non_camel_case_types)]
                    struct GetHistorySvc<T: MemoryGateway>(pub Arc<T>);
                    impl<
                        T: MemoryGateway,
                    > tonic::server::UnaryService<super::GetHistoryRequest>
                    for GetHistorySvc<T> {
                        type Response = super::GetHistoryResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetHistoryRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MemoryGateway>::get_history(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetHistorySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for MemoryGatewayServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "tekfly.virtualdom.v1.MemoryGateway";
    impl<T> tonic::server::NamedService for MemoryGatewayServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
